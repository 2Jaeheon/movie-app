# GitHub Actions Workflow: Combined Test, Build, Performance, and Deployment
# 이 워크플로우는 main 브랜치로의 PR과 푸시 시 트리거되며,
# 테스트 코드 실행, 빌드 검증, 성능 및 웹 표준 검사를 수행한 후 자동 배포를 진행합니다.
name: Test, Build, Performance and Deployment Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 테스트, 빌드 검증 및 성능, 웹 표준 테스트 작업
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # 의존성 설치
      - name: Install dependencies
        run: npm ci

      # 테스트 코드 실행
      - name: Run tests
        run: npm test
        env:
          CI: true

      # 빌드 검증
      - name: Build project
        run: npm run build

      # 서버 시작 (Lighthouse 성능 체크를 위한)
      - name: Start server for Lighthouse
        run: |
          npm install -g serve
          serve -s build &
        env:
          CI: true

      # Lighthouse로 성능 및 웹 표준 검사
      - name: Run Lighthouse for performance and web standards check
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: 'https://2jaeheon.site/movie-app'
          uploadArtifacts: true
          artifactName: 'lighthouse-report'

      # HTML 유효성 검사 (W3C Validator 사용)
      - name: Validate HTML using W3C Validator
        run: |
          npx html-validator-cli --file ./build/index.html --verbose

      # W3C 유효성 검사 결과 업로드
      - name: Upload W3C validation results
        uses: actions/upload-artifact@v3
        with:
          name: w3c-validation
          path: './build/index.html'

  # 배포 작업
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: true

    steps:
      # 코드 체크아웃
      - name: Use repository source
        uses: actions/checkout@v3

      # Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # node_modules 캐시 처리
      - name: Cache node_modules
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 의존성 설치 (캐시 히트 시 스킵)
      - name: Install dependencies
        run: npm ci
        if: steps.cache.outputs.cache-hit != 'true'

      # PUBLIC_URL 설정
      - name: Set PUBLIC_URL
        run: |
          PUBLIC_URL=$(echo $GITHUB_REPOSITORY | sed -r 's/^.+\/(.+)$/\/\1\//')
          echo PUBLIC_URL=$PUBLIC_URL > .env

      # 프로젝트 빌드 및 404.html 복사
      - name: Build
        run: |
          npm run build
          cp ./build/index.html ./build/404.html

      # gh-pages 브랜치로 배포
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.MY_GITHUB_TOKEN }}
          publish_dir: ./build

      # 슬랙 알림 전송
      - name: Send Slack message
        uses: 8398a7/action-slack@v3
        with:
          mention: 'here'                # @here 멘션
          if_mention: failure            # 실패 시 멘션 보냄
          status: ${{ job.status }}      # job 상태 전송
          fields: workflow,job,commit,message,ref,author,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Secret에서 Webhook URL 참조
        if: always()  # 항상 실행되도록 설정
